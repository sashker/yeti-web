#!/usr/bin/env python

import psycopg2, psycopg2.extras, sys, os, re, yaml, getopt
from glob import glob
from subprocess import Popen, PIPE, STDOUT

YETI_DB_PATCH_PATH = '/home/yeti-web/sql'
YETI_DB_CFG_PATH = '/home/yeti-web/config/database.yml'

class dbh:
	patches_path=''
	patches=dict()
	cfg=dict()
	last_version=0
	env_set=''
	cfg_path = YETI_DB_CFG_PATH
	sql_dir = YETI_DB_PATCH_PATH
	auto_confirm = False
	confirm_prompt = "are you sure [y/N] "

	def confirm(self, what):
		if self.auto_confirm:
			print what + "\n" + self.confirm_prompt + 'y (auto confirm)'
			return

		print what

		yes_ans = ["Y","y"]
		allowed_ans = yes_ans + [ "N","n","" ]

		while True:
			ans = raw_input(self.confirm_prompt)
			if ans not in allowed_ans:
				print "unexpected input. choose between suggested answers"
				continue
			break

		if ans not in yes_ans:
			raise SystemExit

	def get_db_version(self):
		cfg = self.cfg
		c = psycopg2.connect('host=%s port=%s dbname=%s user=%s password=%s' % (cfg['host'],cfg['port'],cfg['database'],cfg['username'],cfg['password']))
		cr = c.cursor(cursor_factory=psycopg2.extras.DictCursor)

		try:
		    cr.execute('select number from sys.version order by apply_date desc limit 1')
		except psycopg2.Error as e:
		    sys.stderr.write('ERROR: %sn' % str(e))
		    raise SystemExit(1)

		r = cr.fetchone()
		return r[0]

	def exec_sql_file(self,path):
		psql_cmd = "psql --set ON_ERROR_STOP= -f {}".format(path)

		print "apply {}...".format(path),
		sys.stdout.flush()

		p = Popen(self.env_set+psql_cmd, stdout=None, stderr=PIPE, shell=True)
		ret = p.wait()

		if ret!=0:
			print "fail {}".format(ret)
			print p.stderr.read()
			return False
		else:
			print "ok"
		return True


	def load_cfg(self,section):

		if not os.path.isfile(self.cfg_path):
			raise StandardError("no config file. check path at: {}".format(self.cfg_path))

		with open(self.cfg_path) as f:
			c = yaml.load(f)
			self.cfg = c[section]

		self.set_pg_env()

	def set_pg_env(self):
		cfg = self.cfg
		pg_env = {
			'PGHOST': cfg['host'],
			'PGPORT': cfg['port'],
			'PGDATABASE': cfg['database'],
			'PGUSER': cfg['username'],
			'PGPASSWORD': cfg['password'],
		}
		for k, v in pg_env.iteritems():
			self.env_set+='export {}={}; '.format(k,v)

	
	def load_patches_info(self):
		global patches, patches_path, last_version
		for path in glob(self.patches_path+'/*.sql'):
			f = os.path.splitext(os.path.basename(path))[0]
			# patch file format is:
			#	srcver_dstver.sql - deprecated
			#   srcver_dstver_schema.sql
			schema = None
			v = re.split('_',f)
			if len(v) == 3 :
				schema = v[2] if re.match(r'switch[0-9]{1,2}$', v[2]) else None
			elif len(v) != 2:
				continue
			self.patches[int(v[0])]= { 'dst': int(v[1]), 'path': path , 'schema': schema}
			if v[1] > self.last_version:
				self.last_version = v[1]

	def usage(self):
		print """
usage: yeti-db [options] action

options:

--cdr, -c           - switch to work with CDR database
--yes, -y           - answer yes for all questions
--config file_path  - specify alternate config path
                      default: """ + YETI_DB_CFG_PATH + """
--sql-dir dir_path  - specify durectory with sql patches
                      default: """ + YETI_DB_PATCH_PATH + """
--help, -h          - this help

actions:

    cfg            - show destination database config
    version        - show current database version
    show [version] - show available patch for version
                     (if version is ommited the current database version will be used instead)
    apply          - apply one patch
    apply_all      - apply sequence of patches from current to last possible version
    init           - init database
"""

	def __init__(self,argv):
		try:
			cdr = False
			opts, args = getopt.getopt(
				sys.argv[1:],
				"chy",
				["cdr", "yes", "help", "config=","sql-dir="])
			for o,v in opts:
				if o in ("--help","-h"):
					self.usage()
					raise SystemExit
				elif o in ("--yes","-y"):
					self.auto_confirm = True
				elif o in ("--cdr","-c"):
					cdr = True
				elif o=="--config":
					self.cfg_path = os.path.abspath(os.path.expanduser(v))
				elif o=="--sql-dir":
					self.sql_dir = os.path.abspath(os.path.expanduser(v))

			if not len(args):
				print "missed action"
				self.usage()
				raise SystemExit(1)

			self.action = args[0]
			self.version = args[1] if self.action=='show' and len(args) > 1 else None

			if cdr:
				self.patches_path = self.sql_dir + '/cdr'
				self.load_cfg('production_cdr')
			else:
				self.patches_path = self.sql_dir + '/main'
				self.load_cfg('production')

		except getopt.GetoptError as err:
			print str(err)
			self.usage()
			raise SystemExit(1)

	def process(self):
		cfg = self.cfg

		if self.action=='cfg':
			print "choosen database is: {}@{}:{}/{}".format(cfg['username'],cfg['host'],cfg['port'],cfg['database'])
			print "sql patches dir: {}".format(self.patches_path)
			print "used cfg file: {}".format(self.cfg_path)

		elif self.action=='version':
			v = self.get_db_version()
			print "current database version is: {}".format(v)

		elif self.action=='show':
			self.load_patches_info()
			v = self.version if self.version is not None else self.get_db_version()
			if int(v) not in self.patches.keys():
				print "no patch for version {}".format(v)
				raise SystemExit
			p =  self.patches[int(v)]
			print "patch for version {} is {}".format(v,p['path'])

		elif self.action=='apply':
			self.load_patches_info()
			v = self.get_db_version()
			print "current database version is: {}".format(v)
			if v not in self.patches.keys():
				print "no patch for current version"	
				raise SystemExit
			p = self.patches[v]
			self.confirm("going to apply patch for version {} to {} file '{}'".format(v,p['dst'],p['path']))
			fn = p['path']
			self.exec_sql_file(fn)
			if p['schema']:
				print("WARNING! do not forget to reconfigure your db-related services to the new schema '{}' and restart them.".format(p['schema']))

		elif self.action=='apply_all':
			self.load_patches_info()
			v = self.get_db_version()
			print "current database version is: {}".format(v)

			# compute sequence of patches to last possible version
			seq = list()
			last_version = v
			while True:
				if v not in self.patches.keys():
					break
				p = self.patches[v]
				if v==p['dst']: #avoid infinite loop
					print "wrong patch name '{}'. fix patches directory content".format(p['path'])
					raise SystemExit(1)

				seq.append(p)
				v = p['dst']

			if not seq:
				print "there is no appopriate patches sequence for this version"
				raise SystemExit

			print "going to apply sequence of patches: "
			for p in seq:
				print "\t{}".format(p['path'])
			self.confirm("going to update database to version {}".format(v))
			latest_schema = None
			for p in seq:
				if not self.exec_sql_file(p['path']):
					print "ERROR: sql error during sequence processing. exit"
					print "actual database version is: {}".format(self.get_db_version())
					raise SystemExit(1)
				v = self.get_db_version()
				if p['dst'] != v:
					print "ERROR: patch was successfully applied but resulting database version differs from expected.\n\t(expected: {}, got: {})\nexit".format(p['dst'],v)
					raise SystemExit(1)
				print "patch was applied. new database version is: {}".format(v)
				if p['schema']:
					print("WARNING! do not forget to reconfigure your db-related services to the new schema '{}' and restart them.".format(p['schema']))
					latest_schema = p['schema']
			print "all patches were successfully applied"
			if latest_schema:
				print("WARNING! do not forget to reconfigure your db-related services to the new schema '{}' and restart them.".format(latest_schema))

		elif self.action=='init':
			self.confirm("going to execute database initialization script")
			self.exec_sql_file(self.patches_path+'/init.sql')

		else:
			print "unknown action %s" % self.action
			self.usage()

def main(argv):
	try:
		dbh(argv).process()
	except StandardError as e:
		print e
		pass

if __name__ == "__main__":
	main(sys.argv)
